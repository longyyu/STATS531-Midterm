)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=TRUE, caption='AIC values') %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, align='c', caption='AIC values') %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=FALSE, caption='"<center><strong>AIC for polynomial regression</strong></center>') %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=FALSE, caption='"<center><strong>AIC values</strong></center>') %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=FALSE, caption='<center><strong>AIC values</strong></center>') %>%
kable_styling("striped", full_width = FALSE) %>%
row_spec(row = 0, align = 'c')
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=FALSE, caption='<center><strong>AIC values</strong></center>') %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table %>%
kbl(format='html', digits=2, escape=FALSE, caption='<center>AIC values</center>') %>%
kable_styling("striped", full_width = FALSE)
table
# table %>%
#   knitr::kable(
#       format = "html", digits = 2, escape = TRUE, caption = 'AIC values'
#   )
table[2, 1]
## reading in and formatting data
data = read.csv('michigan_huron.csv', colClasses = list(Date = "Date")) %>%
rename_with(~ str_extract(.x, "([[:alpha:]]+)")) # get rid of `.` in colnames
attach(data)
level = data$MSL
date = data$Date
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
include = TRUE,
comment='',
fig.align = "center"
)
opar = par()
library(tidyverse)
generate_aic_table=function(data, P, Q, D=0, ...){
table=matrix(NA, (P+1), (Q+1))
for(p in 0:P) {
for(q in 0:Q) {
model_aic = try(
arima(data, order = c(p, D, q), method="ML", ...)$aic,
silent = TRUE
)
table[p + 1,q + 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
}
dimnames(table) = list(paste("AR", 0:P, sep=""), paste("MA", 0:Q, sep=""))
table
}
format_aic_tables = function(table, ...) {
min_idx = which(table == min(table, na.rm = TRUE), arr.ind = TRUE)
table %>%
knitr::kable(
format = "html", digits = 2, escape = TRUE, ...
) %>%
kableExtra::row_spec(row = 0, align = 'c') %>%
kableExtra::column_spec(column = 1, bold = TRUE) %>%
kableExtra::kable_styling("striped", full_width = FALSE) %>%
kableExtra::add_footnote(sprintf(
"Model with the lowest AIC: %s %s, AIC = %4.2f\n",
rownames(table)[min_idx[1, 1]], colnames(table)[min_idx[1, 2]],
min(table, na.rm = TRUE)
))
}
generate_acf_qqplot = function(model) {
par(mfrow = c(1, 2))
acf(model$resid, na.action = na.pass,
main = "Autocorrelation function\nestimation")
qqnorm(as.numeric(model$resid))
qqline(as.numeric(model$resid))
par(opar)
}
opar = par()
library(tidyverse)
generate_aic_table=function(data, P, Q, D=0, ...){
table=matrix(NA, (P+1), (Q+1))
for(p in 0:P) {
for(q in 0:Q) {
model_aic = try(
arima(data, order = c(p, D, q), method="ML", ...)$aic,
silent = TRUE
)
table[p + 1,q + 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
}
dimnames(table) = list(paste("AR", 0:P, sep=""), paste("MA", 0:Q, sep=""))
table
}
format_aic_tables = function(table, ...) {
min_idx = which(table == min(table, na.rm = TRUE), arr.ind = TRUE)
table %>%
knitr::kable(
format = "html", digits = 2, escape = TRUE, ...
) %>%
kableExtra::row_spec(row = 0, align = 'c') %>%
kableExtra::column_spec(column = 1, bold = TRUE) %>%
kableExtra::kable_styling("striped", full_width = FALSE) %>%
kableExtra::add_footnote(sprintf(
"Model with the lowest AIC: %s %s, AIC = %4.2f\n",
rownames(table)[min_idx[1, 1]], colnames(table)[min_idx[1, 2]],
min(table, na.rm = TRUE)
))
}
generate_acf_qqplot = function(model) {
par(mfrow = c(1, 2))
acf(model$resid, na.action = na.pass,
main = "Autocorrelation function\nestimation")
qqnorm(as.numeric(model$resid))
qqline(as.numeric(model$resid))
par(opar)
}
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
include = TRUE,
comment='',
fig.align = "center"
)
data_huron %>%
mutate(fit = MSL - m30_11$residuals) %>%
ggplot() +
theme_bw() +
geom_line(aes(Date, MSL), color="#69b3a2", size=1) +
geom_line(aes(Date, fit), color='red', lty=2, size=0.7) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
theme(plot.title=element_text(hjust=0.5))
install.packages(kableExtra)
install.packages('kableExtra')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
include = TRUE,
comment='',
fig.align = "center"
)
opar = par()
library(tidyverse)
library(kableExtra)
generate_aic_table=function(data, P, Q, D=0, ...){
table=matrix(NA, (P+1), (Q+1))
for(p in 0:P) {
for(q in 0:Q) {
model_aic = try(
arima(data, order = c(p, D, q), method="ML", ...)$aic,
silent = TRUE
)
table[p + 1,q + 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
}
dimnames(table) = list(paste("AR", 0:P, sep=""), paste("MA", 0:Q, sep=""))
table
}
format_aic_tables = function(table, ...) {
min_idx = which(table == min(table, na.rm = TRUE), arr.ind = TRUE)
table %>%
knitr::kable(
format='html', digits=2, escape=FALSE, ...
) %>%
row_spec(row = 0, align = 'c') %>%
column_spec(column = 1, bold = TRUE) %>%
kable_styling("striped", full_width = FALSE) %>%
add_footnote(sprintf(
"Model with the lowest AIC: %s %s, AIC = %4.2f\n",
rownames(table)[min_idx[1, 1]], colnames(table)[min_idx[1, 2]],
min(table, na.rm = TRUE)
))
}
generate_acf_qqplot = function(model) {
par(mfrow = c(1, 2))
acf(model$resid, na.action = na.pass,
main = "sample ACF")
qqnorm(as.numeric(model$resid))
qqline(as.numeric(model$resid))
par(opar)
}
## reading in and formatting data
data_huron = read.csv('michigan_huron.csv', colClasses = list(Date = "Date")) %>%
rename_with(~ str_extract(.x, "([[:alpha:]]+)")) %>% # get rid of `.` in colnames
select(Date, MSL) %>%
filter(Date < as.Date("2021-01-01"))
level = data_huron$MSL
date_breaks = with(data_huron, seq.Date(from = min(Date), to = max(Date), by = '5 years'))
peak_trough = rbind(
data_huron %>% filter(Date<as.Date("1990-01-01")) %>% filter(MSL==max(MSL)),
data_huron %>% filter(Date>as.Date("1990-01-01"), Date<as.Date("2000-01-01")) %>% filter(MSL==max(MSL)),
data_huron %>% filter(Date>as.Date("2010-01-01")) %>% filter(MSL==min(MSL))
)
data_huron %>%
ggplot(aes(Date, MSL)) +
theme_bw() +
geom_line(color="#69b3a2", size=1) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
geom_vline(data=peak_trough, aes(xintercept=Date),
color="darkred", linetype="dashed", alpha=.4) +
theme(plot.title=element_text(hjust=0.5))
acf(level, main="sample ACF")
date_num = seq(from = 1980, length = nrow(data_huron), by = 1/12)
table=matrix(NA, 5, 1)
for(i in 1:5) {
model_aic = try(
AIC(lm(level ~ poly(date_num, i))),
silent = TRUE
)
table[i, 1] = ifelse(
inherits(model_aic, "try-error"), NA, model_aic
)
}
dimnames(table) = list(paste("degree ", 1:5, ': ', sep=""))
table %>% # kbl(f
kbl(format='html', digits=2, escape=FALSE, caption='<center style=\'color:black\'><strong>AIC values</strong></center>') %>%
kable_styling("striped", full_width = FALSE)
data_huron %>%
ggplot(aes(Date, MSL)) +
theme_bw() +
geom_line(color="#69b3a2", size=1) +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
ylab("Mean Lake Level (ft)") +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
geom_smooth(size=1, method="lm", formula=y~poly(x, 4),
aes(color="quartic fit", fill="quartic fit")) +
geom_smooth(size=1, method="lm", formula=y~poly(x, 3),
aes(color="cubic fit", fill="cubic fit")) +
scale_colour_manual(name="Fitted values", values=c("#FC948D", "#96BCFF")) +
scale_fill_manual(name="Fitted values", values=c("#FC948D", "#96BCFF")) +
theme(plot.title=element_text(hjust=0.5))
data_huron %>%
mutate(Residuals = lm(level ~ poly(date_num, 3))$residuals) %>%
ggplot(aes(Date, Residuals)) +
theme_bw() +
geom_line(size=1, color="#69b3a2") +
ggtitle('Residuals') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
theme(plot.title=element_text(hjust=0.5))
stl(ts(level, start = c(1980, 2), frequency=12), s.window = 'periodic', t.window=50) %>% plot(main='Decomposition Of Lake Levels')
model <- lm(level ~ poly(date_num, 3))
smoothed <- spectrum(model$residuals, spans=c(5, 5, 5), main="Periodogram (Smoothed)")
idx_max <- which.max(smoothed$spec)
idx_max2 <- which.max(smoothed$spec[20:length(smoothed$spec)]) + 19
idx_max3 <- which.max(smoothed$spec[50:length(smoothed$spec)]) + 49
abline(v=smoothed$freq[idx_max], lty=2, col='red')
abline(v=smoothed$freq[idx_max2], lty=2, col='red')
abline(v=smoothed$freq[idx_max3], lty=2, col='gray')
paste0('local maximum 1: ', smoothed$freq[idx_max])
paste0('local maximum 2: ', smoothed$freq[idx_max2])
paste0('local maximum 3: ', smoothed$freq[idx_max3])
generate_aic_table(
level, P=5, Q=5, D=0, xreg = poly(date_num, 3),
seasonal = list(order = c(1, 0, 1), period = 12)
) %>%
format_aic_tables(caption = '<center style=\'color:black\'><strong>AIC of $\\mathrm{SARMA}(p, q) \\times (1, 1)_{12}$ models, $0 \\leq p, q \\leq 5$</strong></center>')
m30_11 = arima(level, c(3, 0, 0), xreg = poly(date_num, 3),
seasonal = list(order = c(1, 0, 1), period = 12), method='ML')
m20_11 = arima(level, c(2, 0, 0), xreg = poly(date_num, 3),
seasonal = list(order = c(1, 0, 1), period = 12), method='ML')
data_huron %>%
mutate(Residuals = m30_11$residuals) %>%
ggplot(aes(Date, Residuals)) +
ggtitle('Residual Plot') +
theme_bw() +
geom_line(size=.5, color="#69b3a2") +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
theme(plot.title=element_text(hjust=0.5))
generate_acf_qqplot(m30_11)
# unit root test
params30_11 = m30_11$coef
roots = list(
ar_nonseasonal = polyroot(c(1, -params30_11[grep("^ar", names(params30_11))])),
ar_seasonal = polyroot(c(1, -params30_11["sar1"])),
ma_seasonal = polyroot(c(1, params30_11["sma1"]))
)
lapply(roots, abs)
data_huron %>%
mutate(Residuals = m20_11$residuals) %>%
ggplot(aes(Date, Residuals)) +
ggtitle('Residual Plot') +
theme_bw() +
geom_line(size=.5, color="#69b3a2") +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
theme(plot.title=element_text(hjust=0.5))
generate_acf_qqplot(m20_11)
# unit root test
params20_11 = m20_11$coef
roots = list(
ar_nonseasonal = polyroot(c(1, -params20_11[grep("^ar", names(params20_11))])),
ar_seasonal = polyroot(c(1, -params20_11["sar1"])),
ma_seasonal = polyroot(c(1, params20_11["sma1"]))
)
lapply(roots, abs)
tibble(
model="SARMA(3,0) x (1,1)", Term = names(m30_11$coef),
est = sprintf("%4.3f (%4.3f)", m30_11$coef, sqrt(diag(m30_11$var.coef)))
) %>%
rbind(
tibble(
model="SARMA(2,0) x (1,1)", Term = names(m20_11$coef),
est = sprintf("%4.3f (%4.3f)", m20_11$coef, sqrt(diag(m20_11$var.coef)))
)
) %>%
pivot_wider(id_cols = Term, names_from = model, values_from = est, values_fill = list(est = "")) %>%
mutate(Term = ifelse(Term %in% c("1", "2", "3"), sprintf("$\\mathrm{t}^%s$", Term), Term)) %>%
knitr::kable(caption = "<center style=\'color:black\'><strong>Coefficient Estimates (S.E.)</strong></style>", escape = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
data_huron %>%
mutate(fit = MSL - m30_11$residuals) %>%
ggplot() +
theme_bw() +
geom_line(aes(Date, MSL, color="Original data"), size=1, alpha=0.5) +
geom_line(aes(Date, fit, color="Fitted values"), lty=2, size=0.7) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
scale_color_manual(name="", values=c("Original data"="#69b3a2", "Fitted values"="purple")) +
theme(plot.title=element_text(hjust=0.5))
data_erie = read.csv("erie.csv", colClasses = list(Date = "Date")) %>%
rename_with(~ str_extract(.x, "([[:alpha:]]+)")) %>% # get rid of `.` in colnames
select(c("Date", "MSL")) %>%
filter(Date < as.Date("2021-01-01"))
peak_trough = rbind(
data_erie %>% filter(Date<as.Date("1990-01-01")) %>% filter(MSL==max(MSL)),
data_erie %>% filter(Date>as.Date("1990-01-01"), Date<as.Date("2000-01-01")) %>% filter(MSL==max(MSL)),
data_erie %>% filter(Date>as.Date("2010-01-01")) %>% filter(MSL==min(MSL))
)
data_erie %>%
ggplot(aes(Date, MSL)) +
theme_bw() +
geom_line(color="#69b3a2", size=1) +
ylab("Mean Lake Level (ft)") +
ggtitle("Lake Erie Water Levels, 1980-2020") +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
geom_vline(data=peak_trough, aes(xintercept=Date),
color="darkred", linetype="dashed", alpha=.4) +
theme(plot.title=element_text(hjust=0.5))
ggplot() +
theme_bw() +
geom_line(data=data_erie,
aes(Date, MSL-mean(MSL, na.rm=T), alpha="Erie"),
color="#69b3a2", size=1) +
geom_line(data=data_huron,
aes(Date, MSL-mean(MSL, na.rm=T), alpha="Michigan-Huron"),
color="#69b3a2", size=1) +
ylab("Centered Mean Lake Level (ft)") +
ggtitle("Centered Water Levels of Lake Erie and Lake Michigan-Huron") +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
scale_alpha_manual(name="Lake", values = c("Michigan-Huron" = 0.4, "Erie" = 1)) +
theme(legend.position="bottom", legend.margin=margin(-10),
plot.title=element_text(hjust=0.5))
ccf(data_huron$MSL, data_erie$MSL, main="sample CCF")
s <- spectrum(cbind(data_huron$MSL,data_erie$MSL), spans=c(10,15,10), plot=F)
plot(s, plot.type="phase", main="Phase Plot of Erie-Michigan Coherency")
names(m30_11)
names(m30_11)
data_huron %>%
mutate(fit = MSL + m30_11$residuals) %>%
ggplot() +
theme_bw() +
geom_line(aes(Date, MSL, color="Original data"), size=1, alpha=0.5) +
geom_line(aes(Date, fit, color="Fitted values"), lty=2, size=0.7) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
scale_color_manual(name="", values=c("Original data"="#69b3a2", "Fitted values"="purple")) +
theme(plot.title=element_text(hjust=0.5))
# names(m30_11)
data_huron %>%
mutate(fit = MSL + m30_11$residuals) %>%
ggplot() +
theme_bw() +
geom_line(aes(Date, MSL, color="Original data"), size=1, alpha=0.5) +
geom_line(aes(Date, fit, color="Fitted values"), lty=2, size=0.7) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
scale_color_manual(name="", values=c("Original data"="#69b3a2", "Fitted values"="purple")) +
theme(plot.title=element_text(hjust=0.5))
data_huron %>%
mutate(fit = MSL + m30_11$residuals) %>%
ggplot() +
theme_bw() +
geom_line(aes(Date, MSL, color="Original data"), size=1, alpha=0.5) +
geom_line(aes(Date, fit, color="Fitted values"), lty=2, size=0.7) +
ylab("Mean Lake Level (ft)") +
ggtitle('Lake Michigan-Huron Water Levels, 1980-2020') +
scale_x_date(breaks=date_breaks, date_labels='%Y') +
scale_color_manual(name="", values=c("Original data"="#69b3a2", "Fitted values"="purple")) +
theme(plot.title=element_text(hjust=0.5))
